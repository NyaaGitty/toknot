#Object对象说明

Toknot 框架内的大部分对象都会继承`Object`类,本类提供一些对象的操作方法,仅当类继承了Object类才有效,介绍如下:  

1. 构造函数定制
   `Object`类不允许其子类使用`__construct()`构造函数，要求使用`__init()`,代替
   
2. 魔术方法`__call()`定制
    该方法请使用`__callMethod()`代替

3. 魔术方法`__get()`定制
    请使用`getPropertie()`代替

4. 魔术方法`__set()`定制
    请使用`setPropertie()`定制，定制后的方法行为已发生变化，无法进行属性设置

5. 使子对象支持迭代与count功能

6. 子对象实例化行为变更
    如果实例化时，传入的参数中含有对象，那么在该实例内可以访问传入对象的public，protected方法与属性，
    注意默认情况下类属性不允许进行设置操作

7. 单例实现
    在子类中通过使用`SubClass::singleton()`来创建一个实例，并且每次都返回相同实例
    通过`SubClass::getInstance()`返回单例对象，此方法不会创建一个实例

8. 获取类实例
    通过`SubClass::getClassInstance()`获取类的最新实例(该类在调用前已经被实例化了)

9. 获取类的新实例（PHP中的Late Static Bindings）
    通过`SubClass::getNewInstance()`

10. 实例化一个类，通过数组参数进行实例化
    通过`Object::constructArgs($argc, array $args, $className)`实现
    `$argc` 为参数个数， `$args` 为参数列表， `$className`为类名

11. 调用类方法，使用数组参数，能访问除私有方法外的所有方法
    使用方法如下:
```php
//SubClass是Object的子类
$a = new SubClass;
$a->invokeMethod($methodName, array $args);
```

12. 不调用构造函数实例化对象
    使用`SubClass::newInstanceWithoutConstruct()`获取实例，但是不会调用类的构造函数

13. 函数调用,当通过函数方法访问对象时，默认返回该对象实例
    
14. 被当成字符串时返回实例的类名
